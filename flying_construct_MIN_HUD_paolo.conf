name: Paolo HUD

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: all
    spacefueltank:
        class: SpaceFuelContainer
        select: all
    rocketfueltank:
        class: RocketFuelContainer
        select: all
    gyro:
        class: GyroUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    telemetry:
        class: TelemeterUnit
    door:
        class: DoorUnit
        select: all

handlers:
    unit:
        start:
            lua: |
                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})

                -- element widgets
                -- For now we have to alternate between PVP and non-PVP widgets to have them on the same side.
                _autoconf.displayCategoryPanel(weapon, weapon_size, L_TEXT("ui_lua_widget_weapon", "Weapons"), "weapon", true)
                --core.show() -- moved to groud widget
                _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_periscope", "Periscope"), "periscope")
                placeRadar = true
                if atmofueltank_size > 0 then
                    _autoconf.displayCategoryPanel(atmofueltank, atmofueltank_size, L_TEXT("ui_lua_widget_atmofuel", "Atmo Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                if spacefueltank_size > 0 then
                    _autoconf.displayCategoryPanel(spacefueltank, spacefueltank_size, L_TEXT("ui_lua_widget_spacefuel", "Space Fuel"), "fuel_container")
                    if placeRadar then
                        _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                        placeRadar = false
                    end
                end
                _autoconf.displayCategoryPanel(rocketfueltank, rocketfueltank_size, L_TEXT("ui_lua_widget_rocketfuel", "Rocket Fuel"), "fuel_container")
                if placeRadar then -- We either have only rockets or no fuel tanks at all, uncommon for usual vessels
                    _autoconf.displayCategoryPanel(radar, radar_size, L_TEXT("ui_lua_widget_radar", "Radar"), "radar")
                    placeRadar = false
                end
                if antigrav ~= nil then antigrav.show() end
                if warpdrive ~= nil then warpdrive.show() end
                --if gyro ~= nil then gyro.show() end -- moved to ground widget

                -- freeze the player in he is remote controlling the construct
                if Nav.control.isRemoteControlled() == 1 then
                    system.freeze(1)
                end

                -- landing gear
                -- make sure every gears are synchonized with the first
                gearExtended = (Nav.control.isAnyLandingGearExtended() == 1) -- make sure it is a lua boolean
                if gearExtended then
                    Nav.control.extendLandingGears()
                else
                    Nav.control.retractLandingGears()
                end
                if gearExtended then
                    Nav.axisCommandManager:setTargetGroundAltitude(0)
                else
                    Nav.axisCommandManager:setTargetGroundAltitude(500) -- lol I wish
                end
                unit.setTimer("apTick", 1/6)

                if door_1 ~= nil then door_1.deactivate() end
                if door_2 ~= nil then door_2.deactivate() end
                if door_3 ~= nil then door_3.deactivate() end
                if door_4 ~= nil then door_4.deactivate() end
                if door_5 ~= nil then door_5.deactivate() end
                if door_6 ~= nil then door_6.deactivate() end
                if door_7 ~= nil then door_7.deactivate() end
                if door_8 ~= nil then door_8.deactivate() end

                massAndGroundWidgetCreate()
                gearWidgetCreate()
                autoPilotWidgetCreate()

        stop:
            lua: |
                _autoconf.hideCategoryPanels()
                if antigrav ~= nil then antigrav.hide() end
                if warpdrive ~= nil then warpdrive.hide() end
                if gyro ~= nil then gyro.hide() end
                core.hide()
                Nav.control.switchOffHeadlights()
                massAndGroundWidgetDestroy()
                gearWidgetDestroy()
                autoPilotWidgetDestroy()
        tick:
            args: ["apTick"]
            lua: |
                yawInput2 = 0
                rollInput2 = 0
                pitchInput2 = 0
                LastApsDiff = -1
                local velocity = vec3(core.getWorldVelocity())
                local velMag = vec3(velocity):len()
                local sys = galaxyReference[0]
                planet = sys:closestBody(core.getConstructWorldPos())
                kepPlanet = Kep(planet)
                orbit = kepPlanet:orbitalParameters(core.getConstructWorldPos(), velocity)
                

                if AutopilotTargetName ~= "None" then

                    ShowInterplanetaryPanel()
                    
                    system.updateData(interplanetaryHeaderText, '{"label": "Target", "value": "' .. AutopilotTargetName .. '", "unit":""}')
                    travelTime = GetAutopilotTravelTime() -- This also sets AutopilotDistance so we do not have to calc it again
                    distance = AutopilotDistance
                    if not TurnBurn then 
                        brakeDistance, brakeTime = GetAutopilotBrakeDistanceAndTime(velMag)
                        maxBrakeDistance, maxBrakeTime = GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)
                    else
                        brakeDistance, brakeTime = GetAutopilotTBBrakeDistanceAndTime(velMag)
                        maxBrakeDistance, maxBrakeTime = GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)
                    end
                    
                    system.updateData(widgetDistanceText, '{"label": "Distance", "value": "' .. getDistanceDisplayString(distance) .. '", "unit":""}')
                    system.updateData(widgetTravelTimeText, '{"label": "Travel Time", "value": "' .. FormatTimeString(travelTime) .. '", "unit":""}')
                    system.updateData(widgetCurBrakeDistanceText, '{"label": "Cur Brake Distance", "value": "' .. getDistanceDisplayString(brakeDistance) .. '", "unit":""}')
                    system.updateData(widgetCurBrakeTimeText, '{"label": "Cur Brake Time", "value": "' .. FormatTimeString(brakeTime) .. '", "unit":""}')
                    system.updateData(widgetMaxBrakeDistanceText, '{"label": "Max Brake Distance", "value": "' .. getDistanceDisplayString(maxBrakeDistance) .. '", "unit":""}')
                    system.updateData(widgetMaxBrakeTimeText, '{"label": "Max Brake Time", "value": "' .. FormatTimeString(maxBrakeTime) .. '", "unit":""}')

                else
                    HideInterplanetaryPanel()
                end

                --updateHud()
                

                if AutoBrake and AutopilotTargetPlanetName ~= "None" and (vec3(core.getConstructWorldPos())-vec3(AutopilotTargetPlanet.center)):len() <= maxBrakeDistance then
                    brakeInput = 1
                    if planet.name == AutopilotTargetPlanet.name and orbit.apoapsis ~= nil and orbit.eccentricity < 1 then
                            -- We are increasing eccentricity by braking, time to stop
                            brakeInput = 0
                            AutoBrake = false
                    end
                end
                if Autopilot and unit.getAtmosphereDensity() == 0 then
                    -- Planetary autopilot engaged, we are out of atmo, and it has a target
                    -- Do it.  
                    
                    -- If we are here, sadly, we really need to calc the distance every update (or tick)
                    AutopilotDistance = (vec3(AutopilotTargetCoords) - vec3(core.getConstructWorldPos())):len()
                    -- And tbh we should calc the brakeDistance live too, and of course it is also in meters
                    local brakeDistance, brakeTime = GetAutopilotBrakeDistanceAndTime(velMag)
                    --system.print(brakeDistance)
                    brakeDistance = brakeDistance 
                    brakeTime = brakeTime -- * 1.05 -- Padding?
                    -- Maybe instead of pointing at our vector, we point at our vector + how far off our velocity vector is
                    -- This is gonna be hard to get the negatives right.
                    -- If we're still in orbit, don't do anything, that velocity will suck
                    local targetCoords = AutopilotTargetCoords
                    if orbit.apoapsis == nil and velMag > 300 and AutopilotAccelerating then
                        -- Get the angle between forward and velocity
                        -- Get the magnitude for each of yaw and pitch
                        -- Consider a right triangle, with side a being distance to our target
                        -- get side b, where have the angle.  Do this once for each of yaw and pitch
                        -- The result of each of those would then be multiplied by something to make them vectors...
                        
                        
                        -- Okay another idea.
                        -- Normalize forward and velocity, then get the ratio of normvelocity:velocity
                        -- And scale forward back up by that amount.  Then take forward-velocity, the 
                        
                        
                        -- No no.
                        -- Okay so, first, when we realign, we store shipright and shipup, just for this
                        -- Get the difference between ship forward and normalized worldvel
                        -- Get the components in each of the stored shipright and shipup directions
                        -- Get the ratio of velocity to normalized velocity and scale up that component (Hey this is just velmag btw)
                        -- Add that component * shipright or shipup
                        local velVectorOffset = (vec3(AutopilotTargetCoords) - vec3(core.getConstructWorldPos())):normalize() - vec3(velocity):normalize()
                        local pitchComponent = getMagnitudeInDirection(velVectorOffset, AutopilotShipUp)
                        local yawComponent = getMagnitudeInDirection(velVectorOffset, AutopilotShipRight)
                        local leftAmount = -yawComponent * AutopilotDistance * velMag/10
                        local downAmount = -pitchComponent * AutopilotDistance * velMag/10
                        targetCoords = AutopilotTargetCoords + (-leftAmount * vec3(AutopilotShipRight)) + (-downAmount * vec3(AutopilotShipUp))
                    end
                    
                    local aligned = true  -- It shouldn't be used if the following condition isn't met, but just in case

                    if not AutopilotCruising and not AutopilotBraking then
                        aligned = AlignToWorldVector((targetCoords-vec3(core.getConstructWorldPos())):normalize())
                    elseif TurnBurn then
                        aligned = AlignToWorldVector(-vec3(velocity):normalize())
                    end
                    
                    if AutopilotAccelerating then
                        Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 100)
                        if vec3(core.getVelocity()):len() >= MaxGameVelocity then -- This is 29999 kph
                            AutopilotAccelerating = false
                            AutopilotStatus = "Cruising"
                            AutopilotCruising = true
                            Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0)
                        end
                        -- Check if accel needs to stop for braking
                        if AutopilotDistance <= brakeDistance then
                            AutopilotAccelerating = false
                            AutopilotStatus = "Braking"
                            AutopilotBraking = true
                            Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0)
                        end
                    elseif AutopilotBraking then
                        
                        brakeInput = 1
                        if TurnBurn then
                            Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 100)
                        end
                        -- Check if an orbit has been established and cut brakes and disable autopilot if so
                        
                        -- We will try <0.9 instead of <1 so that we do not end up in a barely-orbit where touching the controls will make it an escape orbit
                        -- Though we could probably keep going until it starts getting more eccentric, so we''d maybe have a circular orbit
                        
                        if orbit.periapsis ~= nil and orbit.eccentricity < 1 then
                            AutopilotStatus = "Circularizing Orbit"
                            -- Keep going until the apoapsis and periapsis start getting further apart
                            -- Rather than: orbit.periapsis ~= nil and orbit.periapsis.altitude < ((vec3(planet.center) - vec3(core.getConstructWorldPos())):len() - planet.radius)-1000
                            --local apsDiff = math.abs(orbit.apoapsis.altitude - orbit.periapsis.altitude)
                            --if LastApsDiff ~= -1 and apsDiff > LastApsDiff then 
                            if orbit.eccentricity > LastEccentricity or (orbit.apoapsis.altitude < AutopilotTargetOrbit and orbit.periapsis.altitude < AutopilotTargetOrbit) then
                                --LastApsDiff = -1
                                AutopilotBraking = false
                                Autopilot = false
                                AutopilotStatus = "Aligning" -- Disable autopilot and reset
                                system.print("Autopilot completed, orbit established")
                                brakeInput = 0
                                Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0)
                            end
                            LastApsDiff = apsDiff
                        end
                    elseif AutopilotCruising then
                        if AutopilotDistance <= brakeDistance then
                            AutopilotAccelerating = false
                            AutopilotStatus = "Braking"
                            AutopilotBraking = true
                        end
                    else
                        -- It's engaged but hasn't started accelerating yet.
                        if aligned then
                                -- Re-align to 200km from our aligned right                    
                                if not AutopilotRealigned then -- Removed radius from this because it makes our readouts look inaccurate?
                                    AutopilotTargetCoords = vec3(AutopilotTargetPlanet.center) + ((AutopilotTargetOrbit) * vec3(core.getConstructWorldOrientationRight()))
                                    AutopilotRealigned = true
                                    AutopilotShipUp = core.getConstructWorldOrientationUp()
                                    AutopilotShipRight = core.getConstructWorldOrientationRight()
                                elseif aligned then
                                    AutopilotAccelerating = true
                                    AutopilotStatus = "Accelerating"
                                    -- Set throttle to max
                                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 100) -- 100?
                            end
                        end
                        -- If it's not aligned yet, don't try to burn yet.
                    end
                end
                LastEccentricity = orbit.eccentricity

                gearWidgetUpdate()
                massAndGroundWidgetUpdate()
                autoPilotWidgetUpdate()
                brakeWidgetUpdate()
    system:
        start:
            lua: |
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                pitchInput2 = 0
                rollInput2 = 0
                yawInput2 = 0
                if unit.getAtmosphereDensity() > 0 then
                    brakeInput = 1
                else
                     brakeInput = 0
                end
                -- Written by Dimencia.  Linked sources where appropriate, most have been modified
                AutoBrake = false
                Autopilot = false
                TurnBurn = false
                AutopilotAccelerating = false
                AutopilotBraking = false
                AutopilotCruising = false 
                AutopilotRealigned = false
                AutopilotStrength = 1 --export: How strongly autopilot tries to point at a target
                DampingMultiplier = 40 --export: How strongly it dampens when nearing the correct orientation
                alignmentTolerance = 0.01 --export: How closely it must align to a planet before accelerating to it
                AutopilotTargetOrbit = 100000 --export: How far you want the orbit to be from the planet in m.  200,000 = 1SU
                AutopilotEndSpeed = 0
                travelTime = 0
                distance = 0
                brakeDistance, brakeTime = 0
                maxBrakeDistance, maxBrakeTime = 0
                AutopilotStatus = "Aligning"
                PreviousYawAmount = 0
                PreviousPitchAmount = 0
                PreviousRollAmount = 0
                lastEccentricity = 0
                local warmup = 32 --export: How long it takes your engines to warmup.  Basic Space Engines, from XS to XL: 0.25,1,4,16,32
                
                PrimaryR = 124 --export: Primary HUD color
                PrimaryG = 252 --export: Primary HUD color
                PrimaryB = 0 --export: Primary HUD color
                
                groundlevel = 0

                function massAndGroundWidgetCreate()
                    massAndGroundPanel = system.createWidgetPanel('Mass and Ground')
                    massAndGroundPanelWidget = system.createWidget(massAndGroundPanel, 'value')
                    massAndGroundPanelWidgetConstructMassValue = system.createData('{"label": "Construct mass", "value": "' .. 0 .. '", "unit": "t"}')
                    system.addDataToWidget(massAndGroundPanelWidgetConstructMassValue, massAndGroundPanelWidget)
                    if telemetry ~= nil then
                        massAndGroundPanelWidgetAboveGroundValue = system.createData('{"label": "Above ground", "value": "' .. 0 .. '", "unit": "m"}')
                        system.addDataToWidget(massAndGroundPanelWidgetAboveGroundValue, massAndGroundPanelWidget)
                        massAndGroundPanelWidgetGroundLevelValue = system.createData('{"label": "Ground level", "value": "' .. 0 .. '", "unit": "m"}')
                        system.addDataToWidget(massAndGroundPanelWidgetGroundLevelValue, massAndGroundPanelWidget)
                    end
                    massAndGroundWidgetGravityDataValue = system.createData('{"label": "Gravity", "value": "' .. 0 .. '", "unit": "g"}')
                    system.addDataToWidget(massAndGroundWidgetGravityDataValue, massAndGroundPanelWidget)
                    massAndGroundWidgetCoreAltDataValue = system.createData('{"label": "Core alt", "value": "' .. 0 .. '", "unit": "m"}')
                    system.addDataToWidget(massAndGroundWidgetCoreAltDataValue, massAndGroundPanelWidget)
                    if gyro ~= nil then
                        massAndGroundWidgetGyroPitchDataValue = system.createData('{"label": "Gyro pitch", "value": "' .. 0 .. '", "unit": "deg"}')
                        system.addDataToWidget(massAndGroundWidgetGyroPitchDataValue, massAndGroundPanelWidget)
                        massAndGroundWidgetGyroRollDataValue = system.createData('{"label": "Gyro roll", "value": "' .. 0 .. '", "unit": "deg"}')
                        system.addDataToWidget(massAndGroundWidgetGyroRollDataValue, massAndGroundPanelWidget)
                    end

                end

                function massAndGroundWidgetDestroy()
                    system.destroyData(massAndGroundPanelWidgetConstructMassValue)
                    if telemetry ~= nil then
                        system.destroyData(massAndGroundPanelWidgetAboveGroundValue)
                        system.destroyData(massAndGroundPanelWidgetGroundLevelValue)
                    end
                    system.destroyData(massAndGroundWidgetGravityDataValue)
                    system.destroyData(massAndGroundWidgetCoreAltDataValue)
                    if gyro ~= nil then
                        system.destroyData(massAndGroundWidgetGyroPitchDataValue)
                        system.destroyData(massAndGroundWidgetGyroRollDataValue)
                    end
                    system.destroyWidget(massAndGroundPanelWidget)
                    system.destroyWidgetPanel(massAndGroundPanel)
                end

                function massAndGroundWidgetUpdate()
                    local constructMass = core.getConstructMass()/1000 -- kg to tones -
                    
                    system.updateData(massAndGroundPanelWidgetConstructMassValue, '{"label": "Construct mass", "value": "' .. string.format('%.2f', constructMass) .. '", "unit": "t"}')
                    if telemetry ~= nil then
                        local telemetryDistance = telemetry.getDistance()

                        if telemetryDistance > 0 then
                            groundlevel = core.getAltitude() - telemetryDistance
                        end
                        system.updateData(massAndGroundPanelWidgetAboveGroundValue, '{"label": "Above ground", "value": "' .. string.format('%.2f', core.getAltitude() - groundlevel) .. '", "unit": "m"}')
                        system.updateData(massAndGroundPanelWidgetGroundLevelValue, '{"label": "Ground level", "value": "' .. string.format('%.2f', groundlevel) .. '", "unit": "m"}')
                    end
                    system.updateData(massAndGroundWidgetGravityDataValue, '{"label": "Gravity", "value": "' .. string.format('%.2f', core.g()) .. '", "unit": "g"}')
                    system.updateData(massAndGroundWidgetCoreAltDataValue, '{"label": "Core alt", "value": "' .. string.format('%.2f', core.getAltitude()) .. '", "unit": "m"}')
                    if gyro ~= nil then
                        system.updateData(massAndGroundWidgetGyroPitchDataValue, '{"label": "Gyro pitch", "value": "' .. string.format('%.2f', gyro.getPitch()) .. '", "unit": "deg"}')
                        system.updateData(massAndGroundWidgetGyroRollDataValue, '{"label": "Gyro roll", "value": "' .. string.format('%.2f', gyro.getRoll()) .. '", "unit": "deg"}')
                    end
                end

                function brakeWidgetCreate()
                    brakePanel = system.createWidgetPanel("Brake")
                    brakeWidgetText = system.createWidget(brakePanel, "text")
                    brakeWidgetDataText = system.createData('{"text": "Brake Enabled"}')
                    system.addDataToWidget(brakeWidgetDataText, brakeWidgetText)
                end

                function brakeWidgetDestroy()
                    system.destroyData(brakeWidgetDataText)
                    system.destroyWidget(brakeWidgetText)
                    system.destroyWidgetPanel(brakePanel)
                    brakePanel = nil
                end

                function brakeWidgetUpdate()
                    if brakeInput == 1 then
                        if brakePanel == nil then
                            brakeWidgetCreate()
                        end                                 
                    else
                        if brakePanel ~= nil then
                            brakeWidgetDestroy()
                        end
                    end
                end

                function gearWidgetCreate()
                    gearPanel = system.createWidgetPanel("Gear")
                    gearWidgetText = system.createWidget(gearPanel, "text")
                    gearWidgetDataText = system.createData('{"text": "Gear Extended"}')
                    system.addDataToWidget(gearWidgetDataText, gearWidgetText)
                    gearWidgetHoverHeightValue = system.createWidget(gearPanel, "value")
                    gearWidgetHoverHeightDataValue = system.createData('{"label": "Hover height", "value": "' .. 0 .. '", "unit": "m"}')
                    system.addDataToWidget(gearWidgetHoverHeightDataValue, gearWidgetHoverHeightValue)
                end

                function gearWidgetDestroy()
                    system.destroyData(gearWidgetDataText)
                    system.destroyWidget(gearWidgetText)
                    system.destroyData(gearWidgetHoverHeightDataValue)
                    system.destroyWidget(gearWidgetHoverHeightValue)
                    system.destroyWidgetPanel(gearPanel)
                    gearPanel = nil
                end

                function gearWidgetUpdate()
                    if gearExtended then
                        system.updateData(gearWidgetDataText, '{"text": "Gear Extended"}')
                    else
                        system.updateData(gearWidgetDataText, '{"text": "Gear Retracted"}')
                    end
                    system.updateData(gearWidgetHoverHeightDataValue, '{"label": "Hover height", "value": "' .. Nav:getTargetGroundAltitude() .. '", "unit": "m"}')
                end

                function autoPilotWidgetCreate()
                    autoPilotPanel = system.createWidgetPanel("Auto Pilot")
                    autoPilotWidgetText = system.createWidget(autoPilotPanel, "text")
                    autoPilotWidgetDataText = system.createData('{"text": "Autopilot: disabled"}')
                    system.addDataToWidget(autoPilotWidgetDataText, autoPilotWidgetText)
                    autoPilotWidgetTurnBurnText = system.createWidget(autoPilotPanel, "text")
                    autoPilotWidgetTurnBurnDataText = system.createData('{"text": "Turn & Burn Braking: disabled"}')
                    system.addDataToWidget(autoPilotWidgetTurnBurnDataText, autoPilotWidgetTurnBurnText)
                end

                function autoPilotWidgetDestroy()
                    system.destroyData(autoPilotWidgetDataText)
                    system.destroyWidget(autoPilotWidgetText)
                    system.destroyData(autoPilotWidgetTurnBurnDataText)
                    system.destroyWidget(autoPilotWidgetTurnBurnText)
                    system.destroyWidgetPanel(autoPilotPanel)
                    autoPilotPanel = nil
                end

                function autoPilotWidgetUpdate()
                    if AutoBrake and AutopilotTargetPlanetName ~= "None" then
                        if brakeInput == 0 then
                            system.updateData(autoPilotWidgetDataText, '{"text": "Autopilot: Auto-Braking when within' .. getDistanceDisplayString(maxBrakeDistance) .. ' of ' .. AutopilotTargetPlanet.name .. '"}')
                        else
                            system.updateData(autoPilotWidgetDataText, '{"text": "Autopilot: Auto-Braking until eccentricity:' .. round(orbit.eccentricity,2) .. ' begins to increase"}')
                        end
                    elseif Autopilot and AutopilotTargetPlanetName ~= "None" then
                        system.updateData(autoPilotWidgetDataText, '{"text": "Autopilot: Engaged - ' .. AutopilotStatus .. '"}')
                    else
                        system.updateData(autoPilotWidgetDataText, '{"text": "Autopilot: disabled"}')
                    end
                    if TurnBurn then
                        system.updateData(autoPilotWidgetTurnBurnDataText, '{"text": "Turn & Burn Braking: ENABLED"}')
                    else
                        system.updateData(autoPilotWidgetTurnBurnDataText, '{"text": "Turn & Burn Braking: disabled"}')
                    end
                end
                
                function ShowInterplanetaryPanel()
                -- Interplanetary helper
                    if panelInterplanetary == nil then
                        panelInterplanetary = system.createWidgetPanel("Interplanetary Helper")
                        interplanetaryHeader = system.createWidget(panelInterplanetary, "value")
                        interplanetaryHeaderText = system.createData('{"label": "Target Planet", "value": "N/A", "unit":""}')
                        system.addDataToWidget(interplanetaryHeaderText, interplanetaryHeader)
                        widgetDistance = system.createWidget(panelInterplanetary, "value")
                        widgetDistanceText = system.createData('{"label": "Distance", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetDistanceText, widgetDistance)
                        widgetTravelTime = system.createWidget(panelInterplanetary, "value")
                        widgetTravelTimeText = system.createData('{"label": "Travel Time", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetTravelTimeText, widgetTravelTime)
                        widgetCurBrakeDistance = system.createWidget(panelInterplanetary, "value")
                        widgetCurBrakeDistanceText = system.createData('{"label": "Cur Brake Distance", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetCurBrakeDistanceText, widgetCurBrakeDistance)
                        widgetCurBrakeTime = system.createWidget(panelInterplanetary, "value")
                        widgetCurBrakeTimeText = system.createData('{"label": "Cur Brake Time", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetCurBrakeTimeText, widgetCurBrakeTime)
                        widgetMaxBrakeDistance = system.createWidget(panelInterplanetary, "value")
                        widgetMaxBrakeDistanceText = system.createData('{"label": "Max Brake Distance", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetMaxBrakeDistanceText, widgetMaxBrakeDistance)
                        widgetMaxBrakeTime = system.createWidget(panelInterplanetary, "value")
                        widgetMaxBrakeTimeText = system.createData('{"label": "Max Brake Time", "value": "N/A", "unit":""}')
                        system.addDataToWidget(widgetMaxBrakeTimeText, widgetMaxBrakeTime)
                    end
                end
                function HideInterplanetaryPanel()
                    system.destroyWidgetPanel(panelInterplanetary)
                    panelInterplanetary = nil
                end
                function ToggleAutoBrake()
                    if AutopilotTargetPlanetName ~= "None" and brakeInput == 0 and not AutoBrake then
                        AutoBrake = true
                        Autopilot = false
                    else
                        AutoBrake = false
                    end
                end
                function ToggleAutoPilot()
                    if AutopilotTargetPlanetName ~= "None" and brakeInput == 0 and unit.getAtmosphereDensity() == 0 and not Autopilot then
                        Autopilot = true
                        AutoBrake = false
                    else
                        Autopilot = false
                    end
                end
                function ToggleTurnBurn()
                    TurnBurn = not TurnBurn
                end
                system.showScreen(1)
                function getRelativePitch(velocity) 
                    velocity = vec3(velocity)
                    local pitch = -math.deg(math.atan(velocity.y, velocity.z)) + 180
                    -- This is 0-360 where 0 is straight up
                    pitch = pitch - 90
                    -- So now 0 is straight, but we can now get angles up to 420
                    if pitch < 0 then
                       pitch = 360 + pitch 
                    end 
                    -- Now, if it's greater than 180, say 190, make it go to like -170
                    if pitch > 180 then
                       pitch = -180 + (pitch-180) 
                    end
                    -- And it's backwards.  
                    return -pitch
                end
                function getRelativeYaw(velocity) 
                    velocity = vec3(velocity)
                    return math.deg(math.atan(velocity.y, velocity.x)) - 90
                end
                function AlignToWorldVector(vector)
                    -- Sets inputs to attempt to point at the autopilot target
                    -- Meant to be called from Update or Tick repeatedly
                    vector = vec3(vector):normalize()
                    local targetVec = (vec3(core.getConstructWorldOrientationForward()) - vector)
                    local yawAmount = -getMagnitudeInDirection(targetVec, core.getConstructWorldOrientationRight()) * AutopilotStrength
                    local pitchAmount = -getMagnitudeInDirection(targetVec, core.getConstructWorldOrientationUp()) * AutopilotStrength

                    yawInput2 = yawInput2 - (yawAmount + (yawAmount - PreviousYawAmount) * DampingMultiplier)
                    pitchInput2 = pitchInput2 + (pitchAmount + (pitchAmount - PreviousPitchAmount) * DampingMultiplier)
                    
                    PreviousYawAmount = yawAmount
                    PreviousPitchAmount = pitchAmount
                    --system.print(math.abs(vector:dot(vec3(core.getConstructWorldOrientationForward()))))
                    -- Return true or false depending on whether or not we''re aligned
                    if math.abs(yawAmount) < alignmentTolerance and math.abs(pitchAmount) < alignmentTolerance then
                        return true
                    end
                    return false
                end
                -- HUD - 
                function updateHud()
                    
                    local rgb = [[rgb(]] .. PrimaryR .. "," .. PrimaryG .. "," .. PrimaryB .. [[)]]
                    local rgbdim = [[rgb(]] .. math.floor(PrimaryR *0.9 + 0.5) .. "," .. math.floor(PrimaryG * 0.9 + 0.5) .. "," .. math.floor(PrimaryB * 0.9 + 0.5) .. [[)]]
                    local rgbdimmer = [[rgb(]] .. math.floor(PrimaryR *0.8 + 0.5) .. "," .. math.floor(PrimaryG * 0.8 + 0.5) .. "," .. math.floor(PrimaryB * 0.8 + 0.5) .. [[)]]
                    if system.isViewLocked() == 0 then
                        rgb = [[rgb(]] .. math.floor(PrimaryR *0.5 + 0.5) .. "," .. math.floor(PrimaryG * 0.5 + 0.5) .. "," .. math.floor(PrimaryB * 0.5 + 0.5) .. [[)]]
                        rgbdim = [[rgb(]] .. math.floor(PrimaryR *0.4 + 0.5) .. "," .. math.floor(PrimaryG * 0.4 + 0.5) .. "," .. math.floor(PrimaryB * 0.4 + 0.5) .. [[)]]
                        rgbdimmer = [[rgb(]] .. math.floor(PrimaryR *0.3 + 0.5) .. "," .. math.floor(PrimaryG * 0.3 + 0.5) .. "," .. math.floor(PrimaryB * 0.3 + 0.5) .. [[)]]
                    end
    
                    local content = [[
                    <head>
                        <style>
                            body {margin: 0}
                            svg {display:block; position:absolute; top:0; left:0} 
                            .majorLine {stroke:]] .. rgb .. [[;opacity:0.7;stroke-width:3;fill-opacity:0;}
                            .minorLine {stroke:]] .. rgb .. [[;opacity:0.3;stroke-width:3;fill-opacity:0;}
                            .text {fill:]] .. rgbdimmer .. [[;font-family:Montserrat;font-weight:bold}
                            #space {}
                            #ecu {}
                            #atmos {}

                        </style>
                    </head>
                    <body>
                        <svg height="100%" width="100%" viewBox="0 0 1920 1080">]]

                    if brakeInput == 1 then
                        content = content .. "<text x='960' y='850' font-size='20' fill='red' text-anchor='middle' font-family='Montserrat'>Brake Engaged</text>"
                    end
                    if gearExtended then
                        content = content .. "<text x='960' y='900' font-size='20' fill='red' text-anchor='middle' font-family='Montserrat'>Gear Extended</text>"
                        content = content .. "<text x='960' y='930' font-size='20' fill='red' text-anchor='middle' font-family='Montserrat'>Hover Height: " .. getDistanceDisplayString(Nav:getTargetGroundAltitude()) .. "</text>"
                    end
                    if AutoBrake and AutopilotTargetPlanetName ~= "None" then
                        if brakeInput == 0 then
                            content = content .. "<text x='960' y='225' font-size='20' fill='orange' text-anchor='middle' font-family='Montserrat'>Auto-Braking when within " .. getDistanceDisplayString(maxBrakeDistance) .. " of " .. AutopilotTargetPlanet.name .. "</text>"
                        else
                            content = content .. "<text x='960' y='225' font-size='20' fill='orange' text-anchor='middle' font-family='Montserrat'>Auto-Braking until eccentricity:" .. round(orbit.eccentricity,2) .. " begins to increase</text>"
                        end
                    elseif Autopilot and AutopilotTargetPlanetName ~= "None" then
                        content = content .. "<text x='960' y='225' font-size='20' fill='orange' text-anchor='middle' font-family='Montserrat'>Autopilot Engaged - " .. AutopilotStatus .. "</text>"
                    end
                    if TurnBurn then
                        content = content .. "<text x='960' y='150' font-size='20' fill='darkred' text-anchor='middle' font-family='Montserrat'>Turn & Burn Braking</text>"
                    end
                    
                    if orbit ~= nil and orbit.eccentricity < 1 and orbit.eccentricity > 0 and unit.getAtmosphereDensity() < 0.25 and planet ~= nil and orbit.period ~= nil then
                        -- If orbits are up, let''s try drawing a mockup
                        -- We don't really care about scale.
                        -- First let's define an area to draw it
                        local orbitMapX = 75
                        local orbitMapY = 0
                        local orbitMapSize = 250 -- Always square
                        
                        -- Draw a darkened box around it to keep it visible
                        content = content .. '<rect width="' .. orbitMapSize+orbitMapX*2 .. '" height="' .. orbitMapSize .. '" rx="10" ry="10" x="' .. 0 .. '" y="' .. 0 .. '" style="fill:rgb(0,0,100);stroke-width:4;stroke:white;fill-opacity:0.3;" />'
                        
                        -- Then, draw a 'planet' in the center
                        -- Now draw an ellipse, with both foci at the planet because we're assuming 0 mass ship
                        -- Where rx is apoapsis - periapsis (scaled), and ry is... related to eccentricity
                        -- Such that an eccentricity of 0 gives ry = rx, and eccentricity of 1+ gives ry = 0 (don't draw it)
                        -- So ry would be (1-eccentricity)*rx
                        -- And actually.  To scale rx would to be to make it always equal to width.
                        local rx = orbitMapSize/4
                        
                        -- And, the center of the thing should be shifted so that the apo is far and periapsis is near
                        -- We have arbitrarily chosen the AP to be to the right
                        -- So shift it right by (AP-PE)... scaled...
                        -- To figure out the scale, compare (AP + PE + radius*2) to rx
                        local scale = (orbit.apoapsis.altitude + orbit.periapsis.altitude + planet.radius*2)/(rx*2)
                        --local ry = (1-orbit.eccentricity)*rx
                        local ry = (planet.radius + orbit.periapsis.altitude + (orbit.apoapsis.altitude - orbit.periapsis.altitude)/2)/scale * (1-orbit.eccentricity)
                        -- Then if we divide our xOffset by this it should be good
                        --local xOffset = ((orbit.apoapsis.altitude - orbit.periapsis.altitude)/scale)
                        local xOffset = rx - orbit.periapsis.altitude/scale - planet.radius/scale
                        
                        local ellipseColor = rgbdim
                        if orbit.periapsis.altitude <= 0 then
                            ellipseColor = 'red'
                        end
                        content = content .. '<ellipse cx="' .. orbitMapX + orbitMapSize/2 + xOffset .. '" cy="' .. orbitMapY + orbitMapSize/2 .. '" rx="' .. rx .. '" ry="' .. ry .. '" style="fill:none;stroke:' .. ellipseColor .. ';stroke-width:2" />'
                        content = content .. '<circle cx="' .. orbitMapX + orbitMapSize/2 .. '" cy="' .. orbitMapY + orbitMapSize/2 .. '" r="' .. planet.radius/scale .. '" stroke="white" stroke-width="3" fill="blue" />' -- I think the width is extending past the radius so -4?  IDK though.  
                        -- Mark the apoapsis and periapsis, AP is on the right
                        
                        local orbitInfoYOffset = 15
                        local x = orbitMapX + orbitMapSize + orbitMapX/2
                        local y = orbitMapY + orbitMapSize/2 + 5
                        
                        -- Draw guide lines on the ellipse somehow, from the edge of where the title should be
                        content = content .. [[<line x1="]].. x - 35 ..[[" y1="]] .. y-5 .. [[" x2="]] .. orbitMapX + orbitMapSize/2 + rx + xOffset .. [[" y2="]] .. y-5 .. [["style="stroke:]] .. rgbdim .. [[;opacity:0.3;stroke-width:3"/>]]
                        
                        content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='14' fill=" .. rgb .. " text-anchor='middle' font-family='Montserrat'>Apoapsis</text>"
                        y  = y + orbitInfoYOffset
                        content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='12' fill=" .. rgbdimmer .. " text-anchor='middle' font-family='Montserrat'>" .. getDistanceDisplayString(orbit.apoapsis.altitude) .. "</text>"
                        y  = y + orbitInfoYOffset
                        content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='12' fill=" .. rgbdimmer .. " text-anchor='middle' font-family='Montserrat'>" .. FormatTimeString(orbit.timeToApoapsis) .. "</text>"
                        y  = y + orbitInfoYOffset
                        content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='12' fill=" .. rgbdimmer .. " text-anchor='middle' font-family='Montserrat'>" .. getSpeedDisplayString(orbit.apoapsis.speed) .. "</text>"
                        
                        y = orbitMapY + orbitMapSize/2 + 5
                        x = orbitMapX - orbitMapX/2
                        
                        content = content .. [[<line x1="]].. x + 35 ..[[" y1="]] .. y-5 .. [[" x2="]] .. orbitMapX + orbitMapSize/2 - rx + xOffset .. [[" y2="]] .. y-5 .. [["style="stroke:]] .. rgbdim .. [[;opacity:0.3;stroke-width:3"/>]]
                        
                        content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='14' fill=" .. rgb .. " text-anchor='middle' font-family='Montserrat'>Periapsis</text>"
                        
                        y  = y + orbitInfoYOffset
                        content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='12' fill=" .. rgbdimmer .. " text-anchor='middle' font-family='Montserrat'>" .. getDistanceDisplayString(orbit.periapsis.altitude) .. "</text>"
                        y  = y + orbitInfoYOffset
                        content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='12' fill=" .. rgbdimmer .. " text-anchor='middle' font-family='Montserrat'>" .. FormatTimeString(orbit.timeToPeriapsis) .. "</text>"
                        y  = y + orbitInfoYOffset
                        content = content .. "<text x='" .. x .. "' y='" .. y .. "' font-size='12' fill=" .. rgbdimmer .. " text-anchor='middle' font-family='Montserrat'>" .. getSpeedDisplayString(orbit.periapsis.speed) .. "</text>"
                        
                        -- Add a label for the planet
                        content = content .. "<text x='" .. orbitMapX + orbitMapSize/2 .. "' y='" .. 20 .. "' font-size='18' fill=" .. rgb .. " text-anchor='middle' font-family='Montserrat'>" .. planet.name .. "</text>"
                        
                        
                        
                        -- And ... the hard part.  Figure out how to mark the ship.
                        -- We could use the scale we calced and get the ship's distance from the planet center
                        -- And that would tell us a part of it.
                        -- If we take TimeToPeriapsis/Period, it should give us a value from 0 to 1 where 0.5 means we're at the apoapsis, 0 and 1 both mean basically at periapsis
                        -- So from 1 to 0.5 is the bottom half of the ellipse
                        -- And from 0.5 to 0 is the top half
                        -- And then from 0.5 to 0, and 1 to 0.5, is the right half...
                        -- Or, if ratio is more than 0.25 or less than 0.75
                        
                        local apsisRatio = (orbit.timeToApoapsis/orbit.period) * 2 * math.pi
                        -- So now that we have directions, we need to calc a distance from the center to the orbit
                        
                        -- Or am I stupid.
                        -- I have a number from 0 to 1 representing an angle.  If I multiply by 2pi that is radians right?
                        
                        -- Alright alright.
                        -- x = xr * cos(t)
                        -- y = yr * sin(t)
                        -- Where t ranges from 0 to 2pi radians
                        local shipX = rx * math.cos(apsisRatio)
                        local shipY = ry * math.sin(apsisRatio)
                        
                        content = content .. '<circle cx="' .. orbitMapX + orbitMapSize/2 + shipX + xOffset .. '" cy="' .. orbitMapY + orbitMapSize/2 + shipY .. '" r="5" stroke="white" stroke-width="3" fill="white" />'
                        
                        
                        -- Once we have all that, we should probably rotate the entire thing so that the ship is always at the bottom so you can see AP and PE move?
                        
                    end
                    content = content..[[</svg>]]
                    system.setScreen(content)
                    system.showScreen(1)

                end                
                
                function getPitch(gravityDirection, forward, right)
                    local horizontalForward = gravityDirection:cross(right):normalize_inplace() -- Cross forward?
                    local pitch = math.acos(utils.clamp(horizontalForward:dot(-forward), -1, 1)) * constants.rad2deg -- acos?
                    if horizontalForward:cross(-forward):dot(right) < 0 then pitch = -pitch end -- Cross right dot forward?
                    return pitch
                end
                -- Planet Info - https://gitlab.com/JayleBreak/dualuniverse/-/tree/master/DUflightfiles/autoconf/custom with minor modifications
                function Atlas()
                    return {
                [0] = {
                  [1]={
                    GM=6930729684,
                    bodyId=1,
                    center={x=17465536.000,y=22665536.000,z=-34464.000},
                    name='Madis',
                    planetarySystemId=0,
                    radius=44300
                  },
                  [2]={
                    GM=157470826617,
                    bodyId=2,
                    center={x=-8.000,y=-8.000,z=-126303.000},
                    name='Alioth',
                    planetarySystemId=0,
                    radius=126068
                  },
                  [3]={
                    GM=11776905000,
                    bodyId=3,
                    center={x=29165536.000,y=10865536.000,z=65536.000},
                    name='Thades',
                    planetarySystemId=0,
                    radius=49000
                  },
                  [4]={
                    GM=14893847582,
                    bodyId=4,
                    center={x=-13234464.000,y=55765536.000,z=465536.000},
                    name='Talemai',
                    planetarySystemId=0,
                    radius=57450
                  },
                  [5]={
                    GM=16951680000,
                    bodyId=5,
                    center={x=-43534464.000,y=22565536.000,z=-48934464.000},
                    name='Feli',
                    planetarySystemId=0,
                    radius=60000
                  },
                  [6]={
                    GM=10502547741,
                    bodyId=6,
                    center={x=52765536.000,y=27165538.000,z=52065535.000},
                    name='Sicari',
                    planetarySystemId=0,
                    radius=51100
                  },
                  [7]={
                    GM=13033380591,
                    bodyId=7,
                    center={x=58665538.000,y=29665535.000,z=58165535.000},
                    name='Sinnen',
                    planetarySystemId=0,
                    radius=54950
                  },
                  [8]={
                    GM=18477723600,
                    bodyId=8,
                    center={x=80865538.000,y=54665536.000,z=-934463.940},
                    name='Teoma',
                    planetarySystemId=0,
                    radius=62000
                  },
                  [9]={
                    GM=18606274330,
                    bodyId=9,
                    center={x=-94134462.000,y=12765534.000,z=-3634464.000},
                    name='Jago',
                    planetarySystemId=0,
                    radius=61590
                  },
                  [10]={
                    GM=78480000,
                    bodyId=10,
                    center={x=17448118.224,y=22966846.286,z=143078.820},
                    name='Madis Moon 1',
                    planetarySystemId=0,
                    radius=10000
                  },
                  [11]={
                    GM=237402000,
                    bodyId=11,
                    center={x=17194626.000,y=22243633.880,z=-214962.810},
                    name='Madis Moon 2',
                    planetarySystemId=0,
                    radius=11000
                  },
                  [12]={
                    GM=265046609,
                    bodyId=12,
                    center={x=17520614.000,y=22184730.000,z=-309989.990},
                    name='Madis Moon 3',
                    planetarySystemId=0,
                    radius=15005
                  },
                  [21]={
                    GM=2118960000,
                    bodyId=21,
                    center={x=457933.000,y=-1509011.000,z=115524.000},
                    name='Alioth Moon 1',
                    planetarySystemId=0,
                    radius=30000
                  },
                  [22]={
                    GM=2165833514,
                    bodyId=22,
                    center={x=-1692694.000,y=729681.000,z=-411464.000},
                    name='Alioth Moon 4',
                    planetarySystemId=0,
                    radius=30330
                  },
                  [26]={
                    GM=68234043600,
                    bodyId=26,
                    center={x=-1404835.000,y=562655.000,z=-285074.000},
                    name='Sanctuary',
                    planetarySystemId=0,
                    radius=83400
                  },
                  [30]={
                    GM=211564034,
                    bodyId=30,
                    center={x=29214402.000,y=10907080.695,z=433858.200},
                    name='Thades Moon 1',
                    planetarySystemId=0,
                    radius=14002
                  },
                  [31]={
                    GM=264870000,
                    bodyId=31,
                    center={x=29404193.000,y=10432768.000,z=19554.131},
                    name='Thades Moon 2',
                    planetarySystemId=0,
                    radius=15000
                  },
                  [40]={
                    GM=141264000,
                    bodyId=40,
                    center={x=-13503090.000,y=55594325.000,z=769838.640},
                    name='Talemai Moon 2',
                    planetarySystemId=0,
                    radius=12000
                  },
                  [41]={
                    GM=106830900,
                    bodyId=41,
                    center={x=-12800515.000,y=55700259.000,z=325207.840},
                    name='Talemai Moon 3',
                    planetarySystemId=0,
                    radius=11000
                  },
                  [42]={
                    GM=264870000,
                    bodyId=42,
                    center={x=-13058408.000,y=55781856.000,z=740177.760},
                    name='Talemai Moon 1',
                    planetarySystemId=0,
                    radius=15000
                  },
                  [50]={
                    GM=499917600,
                    bodyId=50,
                    center={x=-43902841.780,y=22261034.700,z=-48862386.000},
                    name='Feli Moon 1',
                    planetarySystemId=0,
                    radius=14000
                  },
                  [70]={
                    GM=396912600,
                    bodyId=70,
                    center={x=58969616.000,y=29797945.000,z=57969449.000},
                    name='Sinnen Moon 1',
                    planetarySystemId=0,
                    radius=17000
                  },
                  [100]={
                    GM=13975172474,
                    bodyId=100,
                    center={x=98865536.000,y=-13534464.000,z=-934461.990},
                    name='Lacobus',
                    planetarySystemId=0,
                    radius=55650
                  },
                  [101]={
                    GM=264870000,
                    bodyId=101,
                    center={x=98905288.170,y=-13950921.100,z=-647589.530},
                    name='Lacobus Moon 3',
                    planetarySystemId=0,
                    radius=15000
                  },
                  [102]={
                    GM=444981600,
                    bodyId=102,
                    center={x=99180968.000,y=-13783862.000,z=-926156.400},
                    name='Lacobus Moon 1',
                    planetarySystemId=0,
                    radius=18000
                  },
                  [103]={
                    GM=211503600,
                    bodyId=103,
                    center={x=99250052.000,y=-13629215.000,z=-1059341.400},
                    name='Lacobus Moon 2',
                    planetarySystemId=0,
                    radius=14000
                  },
                  [110]={
                    GM=9204742375,
                    bodyId=110,
                    center={x=14165536.000,y=-85634465.000,z=-934464.300},
                    name='Symeon',
                    planetarySystemId=0,
                    radius=49050
                  },
                  [120]={
                    GM=7135606629,
                    bodyId=120,
                    center={x=2865536.700,y=-99034464.000,z=-934462.020},
                    name='Ion',
                    planetarySystemId=0,
                    radius=44950
                  },
                  [121]={
                    GM=106830900,
                    bodyId=121,
                    center={x=2472916.800,y=-99133747.000,z=-1133582.800},
                    name='Ion Moon 1',
                    planetarySystemId=0,
                    radius=11000
                  },
                  [122]={
                    GM=176580000,
                    bodyId=122,
                    center={x=2995424.500,y=-99275010.000,z=-1378480.700},
                    name='Ion Moon 2',
                    planetarySystemId=0,
                    radius=15000
                  }  
                 }
                }
                end
                function PlanetRef() 
                --[[ 
                  Provide coordinate transforms and access to kinematic related parameters
                  Author: JayleBreak
                  Usage (unit.start):
                  PlanetaryReference = require('planetref')
                  galaxyReference = PlanetaryReference(referenceTableSource)
                  helios = galaxyReference[0] -- PlanetaryReference.PlanetarySystem instance
                  alioth = helios[2]          -- PlanetaryReference.BodyParameters instance
                  Methods:
                    PlanetaryReference:getPlanetarySystem - based on planetary system ID.
                    PlanetaryReference.isMapPosition - 'true' if an instance of 'MapPosition'
                    PlanetaryReference.createBodyParameters - for entry into reference table
                    PlanetaryReference.BodyParameters - a class containing a body's information.
                    PlanetaryReference.MapPosition - a class for map coordinates
                    PlanetaryReference.PlanetarySystem - a container for planetary system info.
                    PlanetarySystem:castIntersections - from a position in a given direction.
                    PlanetarySystem:closestBody - to the specified coordinates.
                    PlanetarySystem:convertToBodyIdAndWorldCoordinates - from map coordinates.
                    PlanetarySystem:getBodyParameters - from reference table.
                    PlanetarySystem:getPlanetarySystemId - for the instance.
                    BodyParameters:convertToWorldCoordinates - from map coordinates
                    BodyParameters:convertToMapPosition - from world coordinates
                    BodyParameters:getAltitude - of world coordinates
                    BodyParameters:getDistance - from center to world coordinates
                    BodyParameters:getGravity - at a given position in world coordinates.
                  Description
                  An instance of the 'PlanetaryReference' "class" can contain transform and
                  kinematic reference information for all planetary systems in DualUniverse.
                  Each planetary system is identified by a numeric identifier. Currently,
                  the only planetary system, Helios, has the identifier: zero. This "class"
                  supports the indexing ('[]') operation which is equivalent to the
                  use of the 'getPlanetarySystem' method. It also supports the 'pairs()'
                  method for iterating over planetary systems.

                  An instance of the 'PlanetarySystem' "class" contains all reference
                  information for a specific system. It supports the indexing ('[]') and
                  'pairs()' functions which allows iteration over each "body" in the
                  system where the key is the numeric body ID. It also supports the
                  'tostring()' method.
                  An instance of the 'BodyParameters' "class" contains all reference
                  information for a single celestial "body" (a moon or planet). It supports
                  the 'tostring()' method, and contains the data members:
                          planetarySystemId - numeric planetary system ID
                          bodyId            - numeric body ID
                          radius            - radius of the body in meters (zero altitude)
                          center            - world coordinates of the body's center position
                          GM                - the gravitation parameter (g = GM/radius^2)
                  Note that the user is allowed to add custom fields (e.g. body name), but
                  should insure that complex table values have the '__tostring' metamethod
                  implemented.
                  Transform and Kinematics:
                  "World" coordinates is a cartesian coordinate system with an origin at an
                  arbitrary fixed point in a planetary system and with distances measured in
                  meters. The coordinates are expressible either as a simple table of 3 values
                  or an instance of the 'vec3' class.  In either case, the planetary system
                  identity is implicit.
                  "Map" coordinates is a geographic coordinate system with an origin at the
                  center of an identified (by a numeric value) celestial body which is a
                  member of an identified (also a numeric value) planetary system. Note that
                  the convention that latitude, longitude, and altitude values will be the
                  position's x, y, and z world coordinates in the special case of body ID 0.
                  The kinematic parameters in the reference data permit calculations of the
                  gravitational attraction of the celestial body on other objects.
                  Reference Data:
                  This is an example of reference data with a single entry assigned to
                  planetary system ID 0, and body ID 2 ('Alioth'):
                    referenceTable = {
                          [0] = { [2] = { planetarySystemId = 0,
                                          bodyId = 2,
                                          radius = 126068,
                                          center = vec3({x=-8, y=-8, z=-126303}),
                                          GM = 1.572199+11 } -- as in F=-GMm/r^2
                          }
                      }
                    ref=PlanetaryReference(referenceTable)
                  Collecting Reference Data:
                  A combination of information from the "Map" screen in the DU user interface,
                  and values reported by the DU Lua API can be the source of the reference
                  table's data (planetarySystemId, bodyId, and surfaceArea is from the user
                  interface):
                    referenceTable = {}
                    referenceTable[planetarySystemId][bodyId] =
                         PlanetaryReference.createBodyParameters(planetarySystemId,
                                                                 bodyId,
                                                                 surfaceArea,
                                                                 core.getConstructWorldPos(),
                                                                 core.getWorldVertical(),
                                                                 core.getAltitude(),
                                                                 core.g())
                  Adapting Data Sources:
                  Other sources of data can be adapted or converted. An example of adapting a
                  table, defined in the file: 'planets.lua', containing information on a single
                  planetary system and using celestial body name as the key follows (note that
                  a 'name' field is added to the BodyParameters instance transparently after
                  construction, and the '__pairs' meta function is required to support the
                  'closestBody' and '__tostring' methods):
                    ref=PlanetaryReference(
                        {[0] = setmetatable(require('planets'),
                                        { __index = function(bodies, bodyId)
                                             for _,v in pairs(bodies) do
                                                 if v and v.bodyId == bodyId then return v end
                                             end
                                             return nil
                                           end,
                                         __pairs = function(bodies)
                                             return function(t, k)
                                                     local nk, nv = next(t, k)
                                                     if nv then
                                                         local GM = nv.gravity * nv.radius^2
                                                         local bp = BodyParameters(0,
                                                                                   nv.id,
                                                                                   nv.radius,
                                                                                   nv.pos,
                                                                                   GM)
                                                         bp.name = nk
                                                         return nk, bp
                                                    end
                                                    return nk, nv
                                                 end, bodies, nil
                                           end })
                    })

                  Converting Data Sources:
                  An instance of 'PlanetaryReference' that has been adapted to a data source
                  can be used to convert that source to simple table. For example,
                  using the adapted instance shown above:
                    load('convertedData=' .. tostring(ref))()
                    newRef=PlanetaryReference(convertedData)
                  Also See: kepler.lua
                  ]]--
                --[[                    START OF LOCAL IMPLEMENTATION DETAILS             ]]--
                -- Type checks
                local function isNumber(n)  return type(n)           == 'number' end
                local function isSNumber(n) return type(tonumber(n)) == 'number' end
                local function isTable(t)   return type(t)           == 'table'  end
                local function isString(s)  return type(s)           == 'string' end
                local function isVector(v)  return isTable(v)
                                                    and isNumber(v.x and v.y and v.z) end
                local function isMapPosition(m) return isTable(m) and isNumber(m.latitude  and
                                                                               m.longitude and
                                                                               m.altitude  and
                                                                               m.bodyId    and
                                                                               m.systemId) end
                -- Constants
                local deg2rad    = math.pi/180
                local rad2deg    = 180/math.pi
                local epsilon    = 1e-10
                local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'
                local posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' ..
                                   num ..  ',' .. num .. '}'
                -- Utilities
                local utils  = require('cpml.utils')
                local vec3   = require('cpml.vec3')
                local clamp  = utils.clamp
                local function float_eq(a,b)
                    if a == 0 then return math.abs(b) < 1e-09 end
                    if b == 0 then return math.abs(a) < 1e-09 end
                    return math.abs(a - b) < math.max(math.abs(a),math.abs(b))*epsilon
                end
                local function formatNumber(n)
                    local result = string.gsub(
                                    string.reverse(string.format('%.4f',n)),
                                    '^0*%.?','')
                    return result == '' and '0' or string.reverse(result)
                end
                local function formatValue(obj)
                    if isVector(obj) then
                        return string.format('{x=%.3f,y=%.3f,z=%.3f}', obj.x, obj.y, obj.z)
                    end
                    if isTable(obj) and not getmetatable(obj) then
                        local list = {}
                        local nxt  = next(obj)
                        if type(nxt) == 'nil' or nxt == 1 then -- assume this is an array
                            list = obj
                        else
                            for k,v in pairs(obj) do
                                local value = formatValue(v)
                                if type(k) == 'number' then
                                    table.insert(list, string.format('[%s]=%s', k, value))
                                else
                                    table.insert(list, string.format('%s=%s',   k, value))
                                end
                            end
                        end
                        return string.format('{%s}', table.concat(list, ','))
                    end
                    if isString(obj) then
                        return string.format("'%s'", obj:gsub("'",[[\']]))
                    end
                    return tostring(obj)
                end
                -- CLASSES
                -- BodyParameters: Attributes of planetary bodies (planets and moons)
                local BodyParameters = {}
                BodyParameters.__index = BodyParameters
                BodyParameters.__tostring =
                    function(obj, indent)
                        local sep = indent or ''
                        local keys = {}
                        for k in pairs(obj) do table.insert(keys, k) end
                        table.sort(keys)
                        local list = {}
                        for _, k in ipairs(keys) do
                            local value = formatValue(obj[k])
                            if type(k) == 'number' then
                                table.insert(list, string.format('[%s]=%s', k, value))
                            else
                                table.insert(list, string.format('%s=%s', k, value))
                            end
                        end
                        if indent then
                            return string.format('%s%s',
                                                 indent,
                                                 table.concat(list, ',\n' .. indent))
                        end
                        return string.format('{%s}', table.concat(list, ','))
                    end
                BodyParameters.__eq = function(lhs, rhs)
                        return lhs.planetarySystemId == rhs.planetarySystemId and
                               lhs.bodyId            == rhs.bodyId            and
                               float_eq(lhs.radius, rhs.radius)               and
                               float_eq(lhs.center.x, rhs.center.x)           and
                               float_eq(lhs.center.y, rhs.center.y)           and
                               float_eq(lhs.center.z, rhs.center.z)           and
                               float_eq(lhs.GM, rhs.GM)
                    end
                local function mkBodyParameters(systemId, bodyId, radius, worldCoordinates, GM)
                    -- 'worldCoordinates' can be either table or vec3
                    assert(isSNumber(systemId),
                           'Argument 1 (planetarySystemId) must be a number:' .. type(systemId))
                    assert(isSNumber(bodyId),
                           'Argument 2 (bodyId) must be a number:' .. type(bodyId))
                    assert(isSNumber(radius),
                           'Argument 3 (radius) must be a number:' .. type(radius))
                    assert(isTable(worldCoordinates),
                           'Argument 4 (worldCoordinates) must be a array or vec3.' ..
                           type(worldCoordinates))
                    assert(isSNumber(GM),
                           'Argument 5 (GM) must be a number:' .. type(GM))
                    return setmetatable({planetarySystemId = tonumber(systemId),
                                         bodyId            = tonumber(bodyId),
                                         radius            = tonumber(radius),
                                         center            = vec3(worldCoordinates),
                                         GM                = tonumber(GM) }, BodyParameters)
                end
                -- MapPosition: Geographical coordinates of a point on a planetary body.
                local MapPosition = {}
                MapPosition.__index = MapPosition
                MapPosition.__tostring = function(p)
                        return string.format('::pos{%d,%d,%s,%s,%s}',
                                             p.systemId,
                                             p.bodyId,
                                             formatNumber(p.latitude*rad2deg),
                                             formatNumber(p.longitude*rad2deg),
                                             formatNumber(p.altitude))
                    end
                MapPosition.__eq       = function(lhs, rhs)
                        return lhs.bodyId   == rhs.bodyId              and
                               lhs.systemId == rhs.systemId            and
                               float_eq(lhs.latitude,   rhs.latitude)  and
                               float_eq(lhs.altitude,   rhs.altitude)  and
                               (float_eq(lhs.longitude, rhs.longitude) or
                                float_eq(lhs.latitude, math.pi/2)      or
                                float_eq(lhs.latitude, -math.pi/2))
                    end
                -- latitude and longitude are in degrees while altitude is in meters
                local function mkMapPosition(overload, bodyId, latitude, longitude, altitude)
                    local systemId = overload -- Id or '::pos{...}' string
                    if isString(overload) and not longitude and not altitude and
                                              not bodyId    and not latitude then
                        systemId, bodyId, latitude, longitude, altitude =
                                                            string.match(overload, posPattern)
                        assert(systemId, 'Argument 1 (position string) is malformed.')
                    else
                        assert(isSNumber(systemId),
                               'Argument 1 (systemId) must be a number:' .. type(systemId))
                        assert(isSNumber(bodyId),
                               'Argument 2 (bodyId) must be a number:' .. type(bodyId))
                        assert(isSNumber(latitude),
                               'Argument 3 (latitude) must be in degrees:' .. type(latitude))
                        assert(isSNumber(longitude),
                               'Argument 4 (longitude) must be in degrees:' .. type(longitude))
                        assert(isSNumber(altitude),
                               'Argument 5 (altitude) must be in meters:' .. type(altitude))
                    end
                    systemId  = tonumber(systemId)
                    bodyId    = tonumber(bodyId)
                    latitude  = tonumber(latitude)
                    longitude = tonumber(longitude)
                    altitude  = tonumber(altitude)
                    if bodyId == 0 then -- this is a hack to represent points in space
                        return setmetatable({latitude  = latitude,
                                             longitude = longitude,
                                             altitude  = altitude,
                                             bodyId    = bodyId,
                                             systemId  = systemId}, MapPosition)
                    end
                    return setmetatable({latitude  = deg2rad*clamp(latitude, -90, 90),
                                         longitude = deg2rad*(longitude % 360),
                                         altitude  = altitude,
                                         bodyId    = bodyId,
                                         systemId  = systemId}, MapPosition)
                end
                -- PlanetarySystem - map body IDs to BodyParameters
                local PlanetarySystem = {}
                PlanetarySystem.__index = PlanetarySystem
                PlanetarySystem.__tostring =
                    function (obj, indent)
                        local sep = indent and (indent .. '  ' )
                        local bdylist = {}
                        local keys = {}
                        for k in pairs(obj) do table.insert(keys, k) end
                        table.sort(keys)
                        for _, bi in ipairs(keys) do
                            bdy = obj[bi]
                            local bdys = BodyParameters.__tostring(bdy, sep)
                            if indent then
                                table.insert(bdylist,
                                             string.format('[%s]={\n%s\n%s}',
                                                           bi, bdys, indent))
                            else
                                table.insert(bdylist, string.format('  [%s]=%s', bi, bdys))
                            end
                        end
                        if indent then
                            return string.format('\n%s%s%s',
                                                 indent,
                                                 table.concat(bdylist, ',\n' .. indent),
                                                 indent)
                        end
                        return string.format('{\n%s\n}', table.concat(bdylist, ',\n'))
                    end
                local function mkPlanetarySystem(referenceTable)
                    local atlas = {}
                    local pid
                    for _, v in pairs(referenceTable) do
                        local id = v.planetarySystemId
                        if type(id) ~= 'number' then
                            error('Invalid planetary system ID: ' .. tostring(id))
                        elseif pid and id ~= pid then
                            error('Mismatch planetary system IDs: ' .. id .. ' and '
                                  .. pid)
                        end
                        local bid = v.bodyId
                        if type(bid) ~= 'number' then
                            error('Invalid body ID: ' .. tostring(bid))
                        elseif atlas[bid] then
                            error('Duplicate body ID: ' .. tostring(bid))
                        end
                        setmetatable(v.center, getmetatable(vec3.unit_x))
                        atlas[bid] = setmetatable(v, BodyParameters)
                        pid = id
                    end
                    return setmetatable(atlas, PlanetarySystem)
                end
                -- PlanetaryReference - map planetary system ID to PlanetarySystem
                PlanetaryReference = {}
                local function mkPlanetaryReference(referenceTable)
                    return setmetatable({ galaxyAtlas = referenceTable or {} },
                                          PlanetaryReference)
                end
                PlanetaryReference.__index        = 
                    function(t,i)
                        if type(i) == 'number' then
                            local system = t.galaxyAtlas[i]
                            return mkPlanetarySystem(system)
                        end
                        return rawget(PlanetaryReference, i)
                    end
                PlanetaryReference.__pairs        =
                    function(obj)
                        return  function(t, k)
                                    local nk, nv = next(t, k)
                                    return nk, nv and mkPlanetarySystem(nv)
                                end, obj.galaxyAtlas, nil
                    end
                PlanetaryReference.__tostring     =
                    function (obj)
                        local pslist = {}
                        for _,ps in pairs(obj or {}) do
                            local psi = ps:getPlanetarySystemId()
                            local pss = PlanetarySystem.__tostring(ps, '    ')
                            table.insert(pslist,
                                         string.format('  [%s]={%s\n  }', psi, pss))
                        end
                        return string.format('{\n%s\n}\n', table.concat(pslist,',\n'))
                    end
                --[[                       START OF PUBLIC INTERFACE                       ]]--
                -- PlanetaryReference CLASS METHODS:
                --
                -- BodyParameters - create an instance of BodyParameters class
                -- planetarySystemId  [in]: the body's planetary system ID.
                -- bodyId             [in]: the body's ID.
                -- radius             [in]: the radius in meters of the planetary body.
                -- bodyCenter         [in]: the world coordinates of the center (vec3 or table).
                -- GM                 [in]: the body's standard gravitational parameter.
                -- return: an instance of BodyParameters class.
                --
                PlanetaryReference.BodyParameters = mkBodyParameters
                --
                -- MapPosition - create an instance of the MapPosition class
                -- overload [in]: either a planetary system ID or a position string ('::pos...')
                -- bodyId [in]:   (ignored if overload is a position string) the body's ID.
                -- latitude [in]: (ignored if overload is a position string) the latitude.
                -- longitude [in]:(ignored if overload is a position string) the longitude.
                -- altitude [in]: (ignored if overload is a position string) the altitude.
                -- return: the class instance
                --
                PlanetaryReference.MapPosition    = mkMapPosition
                --
                -- PlanetarySystem - create an instance of PlanetarySystem class
                -- referenceData [in]: a table (indexed by bodyId) of body reference info.
                -- return: the class instance
                --
                PlanetaryReference.PlanetarySystem = mkPlanetarySystem
                --
                -- createBodyParameters - create an instance of BodyParameters class
                -- planetarySystemId  [in]: the body's planetary system ID.
                -- bodyId             [in]: the body's ID.
                -- surfaceArea        [in]: the body's surface area in square meters.
                -- aPosition          [in]: world coordinates of a position near the body.
                -- verticalAtPosition [in]: a vector pointing towards the body center.
                -- altitudeAtPosition [in]: the altitude in meters at the position.
                -- gravityAtPosition  [in]: the magnitude of the gravitational acceleration.
                -- return: an instance of BodyParameters class.
                --
                function PlanetaryReference.createBodyParameters(planetarySystemId,
                                                                 bodyId,
                                                                 surfaceArea,
                                                                 aPosition,
                                                                 verticalAtPosition,
                                                                 altitudeAtPosition,
                                                                 gravityAtPosition)
                    assert(isSNumber(planetarySystemId),
                           'Argument 1 (planetarySystemId) must be a number:' ..
                           type(planetarySystemId))
                    assert(isSNumber(bodyId),
                           'Argument 2 (bodyId) must be a number:' .. type(bodyId))
                    assert(isSNumber(surfaceArea),
                           'Argument 3 (surfaceArea) must be a number:' .. type(surfaceArea))
                    assert(isTable(aPosition),
                           'Argument 4 (aPosition) must be an array or vec3:' ..
                           type(aPosition))
                    assert(isTable(verticalAtPosition),
                           'Argument 5 (verticalAtPosition) must be an array or vec3:' ..
                           type(verticalAtPosition))
                    assert(isSNumber(altitudeAtPosition),
                           'Argument 6 (altitude) must be in meters:' ..
                           type(altitudeAtPosition))
                    assert(isSNumber(gravityAtPosition),
                           'Argument 7 (gravityAtPosition) must be number:' ..
                           type(gravityAtPosition))
                    local radius   = math.sqrt(surfaceArea/4/math.pi)
                    local distance = radius + altitudeAtPosition
                    local center   = vec3(aPosition) + distance*vec3(verticalAtPosition)
                    local GM       = gravityAtPosition * distance * distance
                    return mkBodyParameters(planetarySystemId, bodyId, radius, center, GM)
                end
                --
                -- isMapPosition - check for the presence of the 'MapPosition' fields
                -- valueToTest [in]: the value to be checked
                -- return: 'true' if all required fields are present in the input value
                --
                PlanetaryReference.isMapPosition  = isMapPosition
                -- PlanetaryReference INSTANCE METHODS:
                --
                -- getPlanetarySystem - get the planetary system using ID or MapPosition as key
                -- overload [in]: either the planetary system ID or a MapPosition that has it.
                -- return: instance of 'PlanetarySystem' class or nil on error
                --
                function PlanetaryReference:getPlanetarySystem(overload)
                    --if galaxyAtlas then
                        local planetarySystemId = overload
                        if isMapPosition(overload) then
                            planetarySystemId = overload.systemId
                        end
                        if type(planetarySystemId) == 'number' then
                            local system = self.galaxyAtlas[i]
                            if system then
                                if getmetatable(nv) ~= PlanetarySystem then
                                    system = mkPlanetarySystem(system)
                                end
                                return system
                            end
                        end
                    --end
                    --return nil
                end
                -- PlanetarySystem INSTANCE METHODS:
                --
                -- castIntersections - Find the closest body that intersects a "ray cast".
                -- origin [in]: the origin of the "ray cast" in world coordinates
                -- direction [in]: the direction of the "ray cast" as a 'vec3' instance.
                -- sizeCalculator [in]: (default: returns 1.05*radius) Returns size given body.
                -- bodyIds[in]: (default: all IDs in system) check only the given IDs.
                -- return: The closest body that blocks the cast or 'nil' if none.
                --
                function PlanetarySystem:castIntersections(origin,
                                                           direction,
                                                           sizeCalculator,
                                                           bodyIds)
                    local sizeCalculator = sizeCalculator or 
                                            function (body) return 1.05*body.radius end
                    local candidates = {}
                    if bodyIds then
                        for _,i in ipairs(bodyIds) do candidates[i] = self[i] end
                    else
                        bodyIds = {}
                        for k,body in pairs(self) do
                            table.insert(bodyIds, k)
                            candidates[k] = body
                        end
                    end
                    local function compare(b1,b2)
                        local v1 = candidates[b1].center - origin
                        local v2 = candidates[b2].center - origin
                        return v1:len() < v2:len()
                    end
                    table.sort(bodyIds, compare)
                    local dir = direction:normalize()
                    for i, id in ipairs(bodyIds) do
                        local body   = candidates[id]
                        local c_oV3  = body.center - origin
                        local radius = sizeCalculator(body)
                        local dot    = c_oV3:dot(dir)
                        local desc   = dot^2 - (c_oV3:len2() - radius^2)
                        if desc >= 0 then
                            local root     = math.sqrt(desc)
                            local farSide  = dot + root
                            local nearSide = dot - root
                            if nearSide > 0 then
                                return body, farSide, nearSide
                            elseif farSide > 0 then
                                return body, farSide, nil
                            end
                        end
                    end
                    return nil, nil, nil
                end
                --
                -- closestBody - find the closest body to a given set of world coordinates
                -- coordinates       [in]: the world coordinates of position in space
                -- return: an instance of the BodyParameters object closest to 'coordinates'
                --
                function PlanetarySystem:closestBody(coordinates)
                    assert(type(coordinates) == 'table', 'Invalid coordinates.')
                    local minDistance2, body
                    local coord = vec3(coordinates)
                    for _,params in pairs(self) do
                        local distance2 = (params.center - coord):len2()
                        if not body or distance2 < minDistance2 then
                            body         = params
                            minDistance2 = distance2
                        end
                    end
                    return body
                end
                --
                -- convertToBodyIdAndWorldCoordinates - map to body Id and world coordinates
                -- overload [in]: an instance of MapPosition or a position string ('::pos...)
                -- return: a vec3 instance containing the world coordinates or 'nil' on error.
                --
                function PlanetarySystem:convertToBodyIdAndWorldCoordinates(overload)
                    local mapPosition = overload
                    if isString(overload) then
                        mapPosition = mkMapPosition(overload)
                    end
                    if mapPosition.bodyId == 0 then
                        return 0, vec3(mapPosition.latitude,
                                       mapPosition.longitude,
                                       mapPosition.altitude)
                    end
                    local params = self:getBodyParameters(mapPosition)
                    if params then
                        return mapPosition.bodyId,
                               params:convertToWorldCoordinates(mapPosition)
                    end
                end
                --
                -- getBodyParameters - get or create an instance of BodyParameters class
                -- overload [in]: either an instance of MapPosition or a body's ID.
                -- return: a BodyParameters instance or 'nil' if body ID is not found.
                --
                function PlanetarySystem:getBodyParameters(overload)
                    local bodyId = overload
                    if isMapPosition(overload) then
                        bodyId = overload.bodyId
                    end
                    assert(isSNumber(bodyId),
                               'Argument 1 (bodyId) must be a number:' .. type(bodyId))
                    return self[bodyId]
                end
                --
                -- getPlanetarySystemId - get the planetary system ID for this instance
                -- return: the planetary system ID or nil if no planets are in the system.
                --
                function PlanetarySystem:getPlanetarySystemId()
                    local k, v = next(self)
                    return v and v.planetarySystemId
                end
                -- BodyParameters INSTANCE METHODS:
                --
                -- convertToMapPosition - create an instance of MapPosition from coordinates
                -- worldCoordinates [in]: the world coordinates of the map position.
                -- return: an instance of MapPosition class
                --
                function BodyParameters:convertToMapPosition(worldCoordinates)
                    assert(isTable(worldCoordinates),
                           'Argument 1 (worldCoordinates) must be an array or vec3:' ..
                           type(worldCoordinates))
                    local worldVec  = vec3(worldCoordinates) 
                    if self.bodyId == 0 then
                        return setmetatable({latitude  = worldVec.x,
                                             longitude = worldVec.y,
                                             altitude  = worldVec.z,
                                             bodyId    = 0,
                                             systemId  = self.planetarySystemId}, MapPosition)
                    end
                    local coords    = worldVec - self.center
                    local distance  = coords:len()
                    local altitude  = distance - self.radius
                    local latitude  = 0
                    local longitude = 0
                    if not float_eq(distance, 0) then
                        local phi = math.atan(coords.y, coords.x)
                        longitude = phi >= 0 and phi or (2*math.pi + phi)
                        latitude  = math.pi/2 - math.acos(coords.z/distance)
                    end
                    return setmetatable({latitude  = latitude,
                                         longitude = longitude,
                                         altitude  = altitude,
                                         bodyId    = self.bodyId,
                                         systemId  = self.planetarySystemId}, MapPosition)
                end
                --
                -- convertToWorldCoordinates - convert a map position to world coordinates
                -- overload [in]: an instance of MapPosition or a position string ('::pos...')
                --
                function BodyParameters:convertToWorldCoordinates(overload)
                    local mapPosition = isString(overload) and
                                                           mkMapPosition(overload) or overload
                    if mapPosition.bodyId == 0 then -- support deep space map position
                        return vec3(mapPosition.latitude,
                                    mapPosition.longitude,
                                    mapPosition.altitude)
                    end
                    assert(isMapPosition(mapPosition),
                           'Argument 1 (mapPosition) is not an instance of "MapPosition".')
                    assert(mapPosition.systemId == self.planetarySystemId,
                           'Argument 1 (mapPosition) has a different planetary system ID.')
                    assert(mapPosition.bodyId == self.bodyId,
                           'Argument 1 (mapPosition) has a different planetary body ID.')
                    local xproj = math.cos(mapPosition.latitude)
                    return self.center + (self.radius + mapPosition.altitude) *
                           vec3(xproj*math.cos(mapPosition.longitude),
                                xproj*math.sin(mapPosition.longitude),
                                math.sin(mapPosition.latitude))
                end
                --
                -- getAltitude - calculate the altitude of a point given in world coordinates.
                -- worldCoordinates [in]: the world coordinates of the point.
                -- return: the altitude in meters
                --
                function BodyParameters:getAltitude(worldCoordinates)
                    return (vec3(worldCoordinates) - self.center):len() - self.radius
                end
                --
                -- getDistance - calculate the distance to a point given in world coordinates.
                -- worldCoordinates [in]: the world coordinates of the point.
                -- return: the distance in meters
                --
                function BodyParameters:getDistance(worldCoordinates)
                    return (vec3(worldCoordinates) - self.center):len()
                end
                --
                -- getGravity - calculate the gravity vector induced by the body.
                -- worldCoordinates [in]: the world coordinates of the point.
                -- return: the gravity vector in meter/seconds^2
                --
                function BodyParameters:getGravity(worldCoordinates)
                    local radial = self.center - vec3(worldCoordinates) -- directed towards body
                    local len2   = radial:len2()
                    return (self.GM/len2) * radial/math.sqrt(len2)
                end
                -- end of module
                return setmetatable(PlanetaryReference,
                                    { __call = function(_,...)
                                                    return mkPlanetaryReference(...)
                                               end })
                end
                function Keplers()
                    --[[ 
                  Provides methods for computing orbital information for an object
                  Usage:
                  Kepler = require('autoconf.custom.kepler')
                  alioth = Kepler({ GM=157470826617,
                                    bodyId=2,
                                    center={x=-8.000,y=-8.000,z=-126303.000},
                                    name='Alioth',
                                    planetarySystemId=0,
                                    radius=126068
                                  })
                  altitude = 6000
                  position = '::pos{0,2,0,0,6000}'
                  e, o     = alioth:escapeAndOrbitalSpeed(altitude)
                  orbit    = alioth:orbitalParameters(position, {0, o+1, 0})
                  print("Eccentricity " .. orbit.eccentricity)
                  print("Perihelion " .. orbit.periapsis.altitude)
                  print("Max. speed " .. orbit.periapsis.speed)
                  print("Circular orbit speed " .. orbit.periapsis.circularOrbitSpeed)
                  print("Aphelion "  .. orbit.apoapsis.altitude)
                  print("Min. speed " .. orbit.apoapsis.speed)
                  print("Orbital period " .. orbit.period)
                  --- output:
                    Eccentricity 0.0018324307017878
                    Perihelion 6000.0
                    Max. speed 1092.9462297033
                    Circular orbit speed 1091.9462297033
                    Aphelion 6484.8994605062
                    Min. speed 1088.9480596194
                    Orbital period 762.02818214049
                  Methods:
                    Kepler:escapeAndOrbitalSpeed - for a given celestial body and altitude.
                    Kepler:orbitalParameters - for a given massless object and a celestial body.
                  Description
                  The motion of an object in the vicinity of substantially larger mass is
                  in the domain of the "2-body problem". By assuming the object whose motion
                  is of interest is of negligable mass simplifies the calculations of:
                  the speed to escape the body, the speed of a circular orbit, and the
                  parameters defining the orbit of the object (or the lack of orbit as the
                  case may be).
                  Orbital Parameters:
                     periapsis - the closest approach to the planet
                      apoapsis - the furthest point from the planet if in orbit (otherwise nil)
                  eccentricity - 0 for circular orbits
                                <1 for elliptical orbits
                                 1 for parabiolic trajectory
                                >1 for hyperbolic trajectory
                        period - time (in seconds) to complete an orbit
                  Also See: planetref.lua
                ]]--
                local vec3       = require('cpml.vec3')
                local PlanetRef  = PlanetRef()
                local function isString(s) return type(s)   == 'string' end
                local function isTable(t)  return type(t)   == 'table'  end
                local function float_eq(a,b)
                    if a == 0 then return math.abs(b) < 1e-09 end
                    if b == 0 then return math.abs(a) < 1e-09 end
                    return math.abs(a - b) < math.max(math.abs(a),math.abs(b))*epsilon
                end
                Kepler = {}
                Kepler.__index = Kepler
                --
                -- escapeAndOrbitalSpeed - speed required to escape and for a circular orbit
                -- altitude [in]: the height of the orbit in meters above "sea-level"
                -- return: the speed in m/s needed to escape the celestial body and to orbit it.
                --
                function Kepler:escapeAndOrbitalSpeed(altitude)
                    assert(self.body)
                    -- P = -GMm/r and KE = mv^2/2 (no lorentz factor used)
                    -- mv^2/2 = GMm/r
                    -- v^2 = 2GM/r
                    -- v = sqrt(2GM/r1)
                    local distance = altitude + self.body.radius
                    if not float_eq(distance, 0) then
                        local orbit = math.sqrt(self.body.GM/distance)
                        return math.sqrt(2)*orbit, orbit
                    end
                    return nil, nil
                end
                --
                -- orbitalParameters: determine the orbital elements for a two-body system.
                -- overload [in]: the world coordinates or map coordinates of a massless object.
                -- velocity [in]: The velocity of the massless point object in m/s.
                -- return: the 6 orbital elements for the massless object.
                --
                function Kepler:orbitalParameters(overload, velocity)
                    assert(self.body)
                    assert(isTable(overload) or isString(overload))
                    assert(isTable(velocity))
                    local pos = (isString(overload) or PlanetRef.isMapPosition(overload)) and
                                            self.body:convertToWorldCoordinates(overload) or
                                vec3(overload)
                    local v   = vec3(velocity)
                    local r   = pos - self.body.center
                    local v2  = v:len2()
                    local d   = r:len()
                    local mu  = self.body.GM
                    local e   = ((v2 - mu/d)*r - r:dot(v)*v)/mu
                    local a   = mu/(2*mu/d - v2)
                    local ecc = e:len()
                    local dir = e:normalize()
                    local pd  = a*(1-ecc)
                    local ad  = a*(1+ecc)
                    local per = pd*dir + self.body.center
                    local apo = ecc <= 1 and -ad*dir + self.body.center or nil
                    local trm = math.sqrt(a*mu*(1-ecc*ecc))        
                    local Period = apo and 2*math.pi*math.sqrt(a^3/mu)
                    -- These are great and all, but, I need more.
                    local trueAnomaly = math.acos((e:dot(r))/(ecc*d))
                    if r:dot(v) < 0 then
                        trueAnomaly = -(trueAnomaly - 2*math.pi)
                    end        
                    -- Apparently... cos(EccentricAnomaly) = (cos(trueAnomaly) + eccentricity)/(1 + eccentricity * cos(trueAnomaly))
                    local EccentricAnomaly = math.acos((math.cos(trueAnomaly) + ecc)/(1 + ecc * math.cos(trueAnomaly)))
                    -- Then.... apparently if this is below 0, we should add 2pi to it
                    -- I think also if it's below 0, we're past the apoapsis?
                    local timeTau = EccentricAnomaly
                    if timeTau < 0 then
                        timeTau = timeTau + 2*math.pi
                    end
                    -- So... time since periapsis...
                    -- Is apparently easy if you get mean anomly.  t = M/n where n is mean motion, = 2*pi/Period
                    
                    
                    local MeanAnomaly = timeTau - ecc * math.sin(timeTau)
                    local TimeSincePeriapsis = 0
                    local TimeToPeriapsis = 0
                    local TimeToApoapsis = 0
                    if Period ~= nil then
                        TimeSincePeriapsis = MeanAnomaly/(2*math.pi/Period)
                    
                        --system.print(MeanAnomaly .. " - " .. TimeSincePeriapsis .. " - " .. Period .. " - " .. EccentricAnomaly .. " - " .. timeTau .. " - " .. trueAnomaly)
                        -- Mean anom is 0 at periapsis, positive before it... and positive after it.
                        -- I guess this is why I needed to use timeTau and not EccentricAnomaly here
                        
                        TimeToPeriapsis = Period - TimeSincePeriapsis
                        TimeToApoapsis = TimeToPeriapsis + Period/2
                        if trueAnomaly - math.pi > 0 then -- TBH I think something's wrong in my formulas because I needed this.
                            TimeToPeriapsis = TimeSincePeriapsis
                            TimeToApoapsis = TimeToPeriapsis + Period/2
                        end
                        if TimeToApoapsis > Period then
                            TimeToApoapsis = TimeToApoapsis - Period
                        end
                    end
                    return { periapsis       = { position           = per,
                                                 speed              = trm/pd,
                                                 circularOrbitSpeed = math.sqrt(mu/pd),
                                                 altitude           = pd - self.body.radius},
                             apoapsis        = apo and
                                               { position           = apo,
                                                 speed              = trm/ad,
                                                 circularOrbitSpeed = math.sqrt(mu/ad),
                                                 altitude           = ad - self.body.radius},
                             currentVelocity = v,
                             currentPosition = pos,
                             eccentricity    = ecc,
                             period          = Period,
                             eccentricAnomaly = EccentricAnomaly,
                             meanAnomaly = MeanAnomaly,
                             timeToPeriapsis = TimeToPeriapsis,
                             timeToApoapsis = TimeToApoapsis
                           }
                end
                
                local function new(bodyParameters)
                    local params = PlanetRef.BodyParameters(bodyParameters.planetarySystemId,
                                                            bodyParameters.bodyId,
                                                            bodyParameters.radius,
                                                            bodyParameters.center,
                                                            bodyParameters.GM)
                    return setmetatable({body = params}, Kepler)
                end
                return setmetatable(Kepler, { __call = function(_,...) return new(...) end })
                end
                function Kinematics()
                    --[[ 
                  DualUniverse kinematic equations
                  Author: JayleBreak
                  Usage (unit.start):
                  Kinematics = require('autoconf.custom.kinematics')
                  Methods:
                   computeAccelerationTime - "relativistic" version of t = (vf - vi)/a
                   computeDistanceAndTime - Return distance & time needed to reach final speed.
                   computeTravelTime - "relativistic" version of t=(sqrt(2ad+v^2)-v)/a
                  Description
                  DualUniverse increases the effective mass of constructs as their absolute
                  speed increases by using the "lorentz" factor (from relativity) as the scale
                  factor.  This results in an upper bound on the absolute speed of constructs
                  (excluding "warp" drive) that is set to 30 000 KPH (8 333 MPS). This module
                  provides utilities for computing some physical quantities taking this
                  scaling into account.
                ]]--
                local Kinematic = {} -- just a namespace
                local C       = 30000000/3600
                local C2      = C*C
                local ITERATIONS = 100 -- iterations over engine "warm-up" period
                local function lorentz(v) return 1/math.sqrt(1 - v*v/C2) end
                --
                -- computeAccelerationTime - "relativistic" version of t = (vf - vi)/a
                -- initial      [in]: initial (positive) speed in meters per second.
                -- acceleration [in]: constant acceleration until 'finalSpeed' is reached.
                -- final        [in]: the speed at the end of the time interval.
                -- return: the time in seconds spent in traversing the distance
                --
                function Kinematic.computeAccelerationTime(initial, acceleration, final)
                    -- The low speed limit of following is: t=(vf-vi)/a (from: vf=vi+at)
                    local k1 = C*math.asin(initial/C)
                    return (C * math.asin(final/C) - k1)/acceleration
                end
                --
                -- computeDistanceAndTime - Return distance & time needed to reach final speed.
                -- initial[in]:     Initial speed in meters per second.
                -- final[in]:       Final speed in meters per second.
                -- restMass[in]:    Mass of the construct at rest in Kg.
                -- thrust[in]:      Engine's maximum thrust in Newtons.
                -- t50[in]:         (default: 0) Time interval to reach 50% thrust in seconds.
                -- brakeThrust[in]: (default: 0) Constant thrust term when braking.
                -- return: Distance (in meters), time (in seconds) required for change.
                --
                function Kinematic.computeDistanceAndTime(initial,
                                                          final,
                                                          restMass,
                                                          thrust,
                                                          t50,
                                                          brakeThrust)
                    -- This function assumes that the applied thrust is colinear with the
                    -- velocity. Furthermore, it does not take into account the influence
                    -- of gravity, not just in terms of its impact on velocity, but also
                    -- its impact on the orientation of thrust relative to velocity.
                    -- These factors will introduce (usually) small errors which grow as
                    -- the length of the trip increases.
                    t50            = t50 or 0
                    brakeThrust    = brakeThrust or 0 -- usually zero when accelerating
                    local tau0     = lorentz(initial)
                    local speedUp  = initial <= final
                    local a0       = thrust * (speedUp and 1 or -1)/restMass
                    local b0       = -brakeThrust/restMass
                    local totA     = a0+b0
                    if speedUp and totA <= 0 or not speedUp and totA >= 0 then
                        return -1, -1 -- no solution
                    end
                    local distanceToMax, timeToMax = 0, 0
                    -- If, the T50 time is set, then assume engine is at zero thrust and will
                    -- reach full thrust in 2*T50 seconds. Thrust curve is given by:
                    -- Thrust: F(z)=(a0*(1+sin(z))+2*b0)/2 where z=pi*(t/t50 - 1)/2
                    -- Acceleration is given by F(z)/m(z) where m(z) = m/sqrt(1-v^2/c^2)
                    -- or v(z)' = (a0*(1+sin(z))+2*b0)*sqrt(1-v(z)^2/c^2)/2
                    if a0 ~= 0 and t50 > 0 then
                        -- Closed form solution for velocity exists:
                        -- v(t) = -c*tan(w)/sqrt(tan(w)^2+1) => w = -asin(v/c)
                        -- w=(pi*t*(a0/2+b0)-a0*t50*sin(pi*t/2/t50)+*pi*c*k1)/pi/c
                        -- @ t=0, v(0) = vi
                        -- pi*c*k1/pi/c = -asin(vi/c)
                        -- k1 = asin(vi/c)
                        local k1  = math.asin(initial/C)
                        local c1  = math.pi*(a0/2+b0)
                        local c2  = a0*t50
                        local c3  = C*math.pi
                        local v = function(t)
                            local w  = (c1*t - c2*math.sin(math.pi*t/2/t50) + c3*k1)/c3
                            local tan = math.tan(w)
                            return C*tan/math.sqrt(tan*tan+1)
                        end
                        local speedchk = speedUp and function(s) return s >= final end or
                                                     function(s) return s <= final end
                        timeToMax  = 2*t50
                        if speedchk(v(timeToMax)) then
                            local lasttime = 0
                            while math.abs(timeToMax - lasttime) > 0.5 do
                                local t = (timeToMax + lasttime)/2
                                if speedchk(v(t)) then
                                    timeToMax = t 
                                else
                                    lasttime = t
                                end
                            end
                        end
                        -- There is no closed form solution for distance in this case.
                        -- Numerically integrate for time t=0 to t=2*T50 (or less)
                        local lastv = initial
                        local tinc  = timeToMax/ITERATIONS
                        for step = 1, ITERATIONS do
                            local speed = v(step*tinc)
                            distanceToMax = distanceToMax + (speed+lastv)*tinc/2
                            lastv = speed
                        end
                        if timeToMax < 2*t50 then
                            return distanceToMax, timeToMax
                        end
                        initial     = lastv
                    end
                    -- At full thrust, acceleration only depends on the Lorentz factor:
                    -- v(t)' = (F/m(v)) = a*sqrt(1-v(t)^2/c^2) where a = a0+b0
                    -- -> v = c*sin((at+k1)/c)
                    -- @ t=0, v=vi: k1 = c*asin(vi/c)
                    -- -> t = (c*asin(v/c) - k1)/a
                    -- x(t)' = c*sin((at+k1)/c)
                    -- x = k2 - c^2 cos((at+k1)/c)/a
                    -- @ t=0, x=0: k2 = c^2 * cos(k1/c)/a
                    local k1       = C*math.asin(initial/C)
                    local time     = (C * math.asin(final/C) - k1)/totA
                    local k2       = C2 *math.cos(k1/C)/totA
                    local distance = k2 - C2 * math.cos((totA*time + k1)/C)/totA
                    return distance+distanceToMax, time+timeToMax
                end
                --
                -- computeTravelTime - "relativistic" version of t=(sqrt(2ad+v^2)-v)/a
                -- initialSpeed [in]: initial (positive) speed in meters per second
                -- acceleration [in]: constant acceleration until 'distance' is traversed
                -- distance [in]: the distance traveled in meters
                -- return: the time in seconds spent in traversing the distance
                --
                function Kinematic.computeTravelTime(initial, acceleration, distance)
                    -- The low speed limit of following is: t=(sqrt(2ad+v^2)-v)/a
                    -- (from: d=vt+at^2/2)
                    if distance == 0 then return 0 end
                    if acceleration > 0 then
                        local k1       = C*math.asin(initial/C)
                        local k2       = C2*math.cos(k1/C)/acceleration
                        return (C*math.acos(acceleration*(k2 - distance)/C2) - k1)/acceleration
                    end
                    assert(initial > 0, 'Acceleration and initial speed are both zero.')
                    return distance/initial
                end
                function Kinematic.lorentz(v) return lorentz(v) end
                return Kinematic
                end
                PlanetaryReference = PlanetRef()
                galaxyReference = PlanetaryReference(Atlas())
                Kinematic = Kinematics()
                Kep = Keplers()
                AutopilotTargetIndex = 0
                AutopilotTargetName = "None"
                AutopilotTargetPlanet = nil
                MaxGameVelocity = 8333.05
                function getDistanceDisplayString(distance)
                    local su = distance > 100000
                    local result = ""
                    if su then
                        -- Convert to SU
                        result = round(distance/1000/200,1) .. " SU"
                    else
                        -- Convert to KM
                        result = round(distance/1000,1) .. " KM"
                    end

                    return result
                end
                function getSpeedDisplayString(speed) -- TODO: Allow options, for now just do kph
                    return math.floor(round(speed*3.6,0)+0.5) .. " km/h" -- And generally it's not accurate enough to not twitch unless we round 0
                end
                function FormatTimeString(seconds)
                    local hours = math.floor(seconds/3600)
                    local minutes = math.floor(seconds/60%60)
                    local seconds = math.floor(seconds%60)
                    if seconds < 0 or hours < 0 or minutes < 0 then
                        return "0s"
                    end
                    return hours .. "h " .. minutes .. "m" .. seconds .. "s"
                end
                function getMagnitudeInDirection(vector, direction)
                    --return vec3(vector):project_on(vec3(direction)):len()
                    vector = vec3(vector)
                    direction = vec3(direction):normalize_inplace()
                    local result = vector*direction -- To preserve sign, just add them I guess
                    return result.x + result.y + result.z
                end
                function UpdateAutopilotTarget()
                    -- So the indices are weird.  I think we need to do a pairs
                    if AutopilotTargetIndex == 0 then
                        AutopilotTargetName = "None"
                        AutopilotTargetPlanet = nil
                        return true
                    end
                    local count = 0
                    for k,v in pairs(Atlas()[0]) do
                        count = count + 1
                        if count == AutopilotTargetIndex then
                            AutopilotTargetName = v.name
                            AutopilotTargetPlanet = galaxyReference[0][k]
                            AutopilotTargetCoords = vec3(AutopilotTargetPlanet.center) -- Aim center until we align
                            -- Determine the end speed
                            _, AutopilotEndSpeed = kepPlanet:escapeAndOrbitalSpeed(AutopilotTargetOrbit - AutopilotTargetPlanet.radius)
                            -- This seems like a nice idea, but for some reason brake times are already underestimated
                            AutopilotEndSpeed = 0
                            AutopilotPlanetGravity = AutopilotTargetPlanet:getGravity(AutopilotTargetCoords + vec3({1,0,0}) * AutopilotTargetOrbit):len() -- Any direction, at our orbit height
                            AutopilotAccelerating = false
                            AutopilotBraking = false
                            AutopilotCruising = false 
                            Autoilot = false
                            AutopilotRealigned = false
                            AutopilotStatus = "Aligning"
                            return true
                        end
                    end
                    system.print("Error: Autopilot index was outside the bounds of the target range")
                    return false
                end
                function IncrementAutopilotTargetIndex()
                    AutopilotTargetIndex = AutopilotTargetIndex + 1
                    if AutopilotTargetIndex >  tablelength(Atlas()[0]) then 
                        AutopilotTargetIndex = 0
                    end
                    UpdateAutopilotTarget()
                end
                function DecrementAutopilotTargetIndex()
                    AutopilotTargetIndex = AutopilotTargetIndex - 1
                    if AutopilotTargetIndex < 0 then 
                        AutopilotTargetIndex = tablelength(Atlas()[0])
                    end
                    UpdateAutopilotTarget()
                end
                function GetAutopilotTravelTime()
                    AutopilotDistance = (AutopilotTargetPlanet.center - vec3(core.getConstructWorldPos())):len()
                    local velocity = core.getWorldVelocity() 
                    local accelDistance, accelTime = Kinematic.computeDistanceAndTime(vec3(velocity):len(),
                        MaxGameVelocity, -- From currently velocity to max
                        core.getConstructMass(),
                        Nav:maxForceForward(),
                        warmup, -- T50?  Assume none, negligible for this
                        0) -- Brake thrust, none for this
                    -- accelDistance now has the amount of distance for which we will be accelerating
                    -- Then we need the distance we'd brake from full speed
                    -- Note that for some nearby moons etc, it may never reach full speed though.
                    local brakeDistance, brakeTime
                    if not TurnBurn then 
                        brakeDistance, brakeTime = GetAutopilotBrakeDistanceAndTime(MaxGameVelocity)
                    else
                        brakeDistance, brakeTime = GetAutopilotTBBrakeDistanceAndTime(MaxGameVelocity)
                    end
                    local curBrakeDistance, curBrakeTime
                    if not TurnBurn then 
                        curBrakeDistance, curBrakeTime = GetAutopilotBrakeDistanceAndTime(vec3(velocity):len())
                    else
                        curBrakeDistance, curBrakeTime = GetAutopilotTBBrakeDistanceAndTime(vec3(velocity):len())
                    end
                    local cruiseDistance = 0
                    local cruiseTime = 0
                    
                    -- So, time is in seconds
                    -- If cruising or braking, use real cruise/brake values
                    if brakeDistance + accelDistance < AutopilotDistance then 
                        -- Add any remaining distance
                        cruiseDistance = AutopilotDistance - (brakeDistance + accelDistance)
                        cruiseTime = Kinematic.computeTravelTime(8333.0556, 0, cruiseDistance)
                    else
                        local accelRatio = (AutopilotDistance - brakeDistance)/accelDistance
                        accelDistance = AutopilotDistance - brakeDistance -- Accel until we brake
                        accelTime = accelTime * accelRatio
                    end
                    if AutopilotBraking then
                        return curBrakeTime
                    elseif AutopilotCruising then
                        return cruiseTime + curBrakeTime
                    else -- If not cruising or braking, assume we'll get to max speed
                        return accelTime + brakeTime + cruiseTime
                    end
                end
                function GetAutopilotBrakeDistanceAndTime(speed)
                    return Kinematic.computeDistanceAndTime(speed, AutopilotEndSpeed, core.getConstructMass(), 0, 0, json.decode(unit.getData()).maxBrake - (AutopilotPlanetGravity * core.getConstructMass()))
                end
                function GetAutopilotTBBrakeDistanceAndTime(speed) -- Uses thrust and a configured T50
                    return Kinematic.computeDistanceAndTime(speed, AutopilotEndSpeed, core.getConstructMass(), Nav:maxForceForward(), warmup, json.decode(unit.getData()).maxBrake - (AutopilotPlanetGravity * core.getConstructMass()))
                end
                function round(num, numDecimalPlaces)
                  local mult = 10^(numDecimalPlaces or 0)
                  return math.floor(num * mult + 0.5) / mult
                end
                function tablelength(T)
                  local count = 0
                  for _ in pairs(T) do count = count + 1 end
                  return count
                end
        flush:
            lua: |
                -- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu

                local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                -- final inputs
                local finalPitchInput = pitchInput + pitchInput2 + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + rollInput2 + system.getControlDeviceYawInput()
                local finalYawInput = (yawInput + yawInput2) - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput

                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(core.getConstructWorldOrientationUp())
                local constructForward = vec3(core.getConstructWorldOrientationForward())
                local constructRight = vec3(core.getConstructWorldOrientationRight())
                local constructVelocity = vec3(core.getWorldVelocity())
                local constructVelocityDir = vec3(core.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)

                -- Rotation
                local constructAngularVelocity = vec3(core.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp

                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    local autoRollRollThreshold = 1.0
                    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range

                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end

                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio

                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio

                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end

                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities

                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(core.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)

                -- Brakes
                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)

                -- AutoNavigation regroups all the axis command by 'TargetSpeed'
                local autoNavigationEngineTags = ''
                local autoNavigationAcceleration = vec3()
                local autoNavigationUseBrake = false

                -- Longitudinal Translation
                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end

                end

                -- Lateral Translation
                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                if (lateralCommandType == axisCommandType.byThrottle) then
                    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                end

                -- Vertical Translation
                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                if (verticalCommandType == axisCommandType.byThrottle) then
                    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                end

                -- Auto Navigation (Cruise Control)
                if (autoNavigationAcceleration:len() > constants.epsilon) then
                    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                    then
                        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                    end
                    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                end

                -- Rockets
                Nav:setBoosterCommand('rocket_engine')

        update:
            lua: Nav:update()

        actionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    Nav.control.extendLandingGears()
                    Nav.axisCommandManager:setTargetGroundAltitude(0)
                else
                    Nav.control.retractLandingGears()
                    Nav.axisCommandManager:setTargetGroundAltitude(500)
                end

        actionStart:
            args: [light]
            lua: |
                if Nav.control.isAnyHeadlightSwitchedOn() == 1 then
                    Nav.control.switchOffHeadlights()
                else
                    Nav.control.switchOnHeadlights()
                end

        actionStart:
            args: [forward]
            lua: pitchInput = pitchInput - 1
        actionStop:
            args: [forward]
            lua: pitchInput = pitchInput + 1
        actionStart:
            args: [backward]
            lua: pitchInput = pitchInput + 1
        actionStop:
            args: [backward]
            lua: pitchInput = pitchInput - 1
        actionStart:
            args: [left]
            lua: rollInput = rollInput - 1
        actionStop:
            args: [left]
            lua: rollInput = rollInput + 1
        actionStart:
            args: [right]
            lua: rollInput = rollInput + 1
        actionStop:
            args: [right]
            lua: rollInput = rollInput - 1

        actionStart:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
        actionStop:
            args: [straferight]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)

        actionStart:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
        actionStop:
            args: [strafeleft]
            lua: Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)

        actionStart:
            args: [up]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
        actionStop:
            args: [up]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
        actionStart:
            args: [down]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
        actionStop:
            args: [down]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)

        actionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)

        actionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)

        actionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)

        actionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)

        actionStart:
            args: [yawright]
            lua: yawInput = yawInput - 1
        actionStop:
            args: [yawright]
            lua: yawInput = yawInput + 1
        actionStart:
            args: [yawleft]
            lua: yawInput = yawInput + 1
        actionStop:
            args: [yawleft]
            lua: yawInput = yawInput - 1
        actionStart:
            args: [option1]
            lua: IncrementAutopilotTargetIndex()
        actionStart:
            args: [option2]
            lua: DecrementAutopilotTargetIndex()
        actionStart:
            args: [option3]
            lua: ToggleAutoBrake()
        actionStart:
            args: [option4]
            lua: ToggleAutoPilot()
        actionStart:
            args: [option5]
            lua: ToggleTurnBurn()
        actionStart:
            args: [brake]
            lua: |
                if brakeInput == 0 then
                    brakeInput = 1
                else
                    brakeInput = 0
                end
        actionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        actionStart:
            args: [stopengines]
            lua: Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal)
        actionStart:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
        actionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
        actionStart:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
        actionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)

        actionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end
        actionStart:
            args: [warp]
            lua: if warpdrive ~= nil then warpdrive.activateWarp() end
